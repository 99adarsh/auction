// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/auction/active_auctions_list.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActiveAuctionsList struct {
	Id               uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AuctionId        string `protobuf:"bytes,2,opt,name=auctionId,proto3" json:"auctionId,omitempty"`
	AuctionEndHeight int64  `protobuf:"varint,3,opt,name=auctionEndHeight,proto3" json:"auctionEndHeight,omitempty"`
}

func (m *ActiveAuctionsList) Reset()         { *m = ActiveAuctionsList{} }
func (m *ActiveAuctionsList) String() string { return proto.CompactTextString(m) }
func (*ActiveAuctionsList) ProtoMessage()    {}
func (*ActiveAuctionsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_af606e8e2d8ca8fc, []int{0}
}
func (m *ActiveAuctionsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveAuctionsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveAuctionsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveAuctionsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveAuctionsList.Merge(m, src)
}
func (m *ActiveAuctionsList) XXX_Size() int {
	return m.Size()
}
func (m *ActiveAuctionsList) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveAuctionsList.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveAuctionsList proto.InternalMessageInfo

func (m *ActiveAuctionsList) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActiveAuctionsList) GetAuctionId() string {
	if m != nil {
		return m.AuctionId
	}
	return ""
}

func (m *ActiveAuctionsList) GetAuctionEndHeight() int64 {
	if m != nil {
		return m.AuctionEndHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*ActiveAuctionsList)(nil), "auction.auction.ActiveAuctionsList")
}

func init() {
	proto.RegisterFile("auction/auction/active_auctions_list.proto", fileDescriptor_af606e8e2d8ca8fc)
}

var fileDescriptor_af606e8e2d8ca8fc = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4a, 0x2c, 0x4d, 0x2e,
	0xc9, 0xcc, 0xcf, 0xd3, 0x87, 0xd3, 0xc9, 0x25, 0x99, 0x65, 0xa9, 0xf1, 0x50, 0x6e, 0x71, 0x7c,
	0x4e, 0x66, 0x71, 0x89, 0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe, 0x10, 0x3f, 0x54, 0x50, 0x0f, 0x4a,
	0x2b, 0xe5, 0x71, 0x09, 0x39, 0x82, 0x95, 0x3b, 0x42, 0x55, 0xfb, 0x64, 0x16, 0x97, 0x08, 0xf1,
	0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x31, 0x65, 0xa6, 0x08, 0xc9,
	0x70, 0x71, 0x42, 0x35, 0x78, 0xa6, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x21, 0x04, 0x84,
	0xb4, 0xb8, 0x04, 0xa0, 0x1c, 0xd7, 0xbc, 0x14, 0x8f, 0xd4, 0xcc, 0xf4, 0x8c, 0x12, 0x09, 0x66,
	0x05, 0x46, 0x0d, 0xe6, 0x20, 0x0c, 0x71, 0x27, 0xc3, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92,
	0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c,
	0x96, 0x63, 0x88, 0x12, 0x87, 0x39, 0xbf, 0x02, 0xee, 0x91, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24,
	0x36, 0xb0, 0xd3, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x61, 0x51, 0x77, 0xe8, 0x00,
	0x00, 0x00,
}

func (m *ActiveAuctionsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveAuctionsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveAuctionsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionEndHeight != 0 {
		i = encodeVarintActiveAuctionsList(dAtA, i, uint64(m.AuctionEndHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AuctionId) > 0 {
		i -= len(m.AuctionId)
		copy(dAtA[i:], m.AuctionId)
		i = encodeVarintActiveAuctionsList(dAtA, i, uint64(len(m.AuctionId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintActiveAuctionsList(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintActiveAuctionsList(dAtA []byte, offset int, v uint64) int {
	offset -= sovActiveAuctionsList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActiveAuctionsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActiveAuctionsList(uint64(m.Id))
	}
	l = len(m.AuctionId)
	if l > 0 {
		n += 1 + l + sovActiveAuctionsList(uint64(l))
	}
	if m.AuctionEndHeight != 0 {
		n += 1 + sovActiveAuctionsList(uint64(m.AuctionEndHeight))
	}
	return n
}

func sovActiveAuctionsList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActiveAuctionsList(x uint64) (n int) {
	return sovActiveAuctionsList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActiveAuctionsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveAuctionsList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveAuctionsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveAuctionsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveAuctionsList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveAuctionsList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveAuctionsList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveAuctionsList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionEndHeight", wireType)
			}
			m.AuctionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveAuctionsList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveAuctionsList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActiveAuctionsList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActiveAuctionsList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActiveAuctionsList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveAuctionsList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveAuctionsList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActiveAuctionsList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActiveAuctionsList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActiveAuctionsList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActiveAuctionsList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActiveAuctionsList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActiveAuctionsList = fmt.Errorf("proto: unexpected end of group")
)
