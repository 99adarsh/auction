// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/auction/auction_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuctionInfo struct {
	AuctionId            string `protobuf:"bytes,1,opt,name=auctionId,proto3" json:"auctionId,omitempty"`
	ItemName             string `protobuf:"bytes,2,opt,name=itemName,proto3" json:"itemName,omitempty"`
	StartingPrice        uint64 `protobuf:"varint,3,opt,name=startingPrice,proto3" json:"startingPrice,omitempty"`
	AuctionEndHeight     uint64 `protobuf:"varint,4,opt,name=auctionEndHeight,proto3" json:"auctionEndHeight,omitempty"`
	CurrentHighestBid    uint64 `protobuf:"varint,5,opt,name=currentHighestBid,proto3" json:"currentHighestBid,omitempty"`
	CurrentHighestBidder string `protobuf:"bytes,6,opt,name=currentHighestBidder,proto3" json:"currentHighestBidder,omitempty"`
}

func (m *AuctionInfo) Reset()         { *m = AuctionInfo{} }
func (m *AuctionInfo) String() string { return proto.CompactTextString(m) }
func (*AuctionInfo) ProtoMessage()    {}
func (*AuctionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bfa95c3407a436f, []int{0}
}
func (m *AuctionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionInfo.Merge(m, src)
}
func (m *AuctionInfo) XXX_Size() int {
	return m.Size()
}
func (m *AuctionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionInfo proto.InternalMessageInfo

func (m *AuctionInfo) GetAuctionId() string {
	if m != nil {
		return m.AuctionId
	}
	return ""
}

func (m *AuctionInfo) GetItemName() string {
	if m != nil {
		return m.ItemName
	}
	return ""
}

func (m *AuctionInfo) GetStartingPrice() uint64 {
	if m != nil {
		return m.StartingPrice
	}
	return 0
}

func (m *AuctionInfo) GetAuctionEndHeight() uint64 {
	if m != nil {
		return m.AuctionEndHeight
	}
	return 0
}

func (m *AuctionInfo) GetCurrentHighestBid() uint64 {
	if m != nil {
		return m.CurrentHighestBid
	}
	return 0
}

func (m *AuctionInfo) GetCurrentHighestBidder() string {
	if m != nil {
		return m.CurrentHighestBidder
	}
	return ""
}

func init() {
	proto.RegisterType((*AuctionInfo)(nil), "auction.auction.AuctionInfo")
}

func init() {
	proto.RegisterFile("auction/auction/auction_info.proto", fileDescriptor_0bfa95c3407a436f)
}

var fileDescriptor_0bfa95c3407a436f = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0x2c, 0x4d, 0x2e,
	0xc9, 0xcc, 0xcf, 0xd3, 0x47, 0xa3, 0xe3, 0x33, 0xf3, 0xd2, 0xf2, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0xf8, 0xa1, 0x62, 0x7a, 0x50, 0x5a, 0xe9, 0x37, 0x23, 0x17, 0xb7, 0x23, 0x84, 0xed,
	0x99, 0x97, 0x96, 0x2f, 0x24, 0xc3, 0xc5, 0x09, 0x95, 0xf2, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x42, 0x08, 0x08, 0x49, 0x71, 0x71, 0x64, 0x96, 0xa4, 0xe6, 0xfa, 0x25, 0xe6, 0xa6,
	0x4a, 0x30, 0x81, 0x25, 0xe1, 0x7c, 0x21, 0x15, 0x2e, 0xde, 0xe2, 0x92, 0xc4, 0xa2, 0x92, 0xcc,
	0xbc, 0xf4, 0x80, 0xa2, 0xcc, 0xe4, 0x54, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x54, 0x41,
	0x21, 0x2d, 0x2e, 0x01, 0xa8, 0x71, 0xae, 0x79, 0x29, 0x1e, 0xa9, 0x99, 0xe9, 0x19, 0x25, 0x12,
	0x2c, 0x60, 0x85, 0x18, 0xe2, 0x42, 0x3a, 0x5c, 0x82, 0xc9, 0xa5, 0x45, 0x45, 0xa9, 0x79, 0x25,
	0x1e, 0x99, 0xe9, 0x19, 0xa9, 0xc5, 0x25, 0x4e, 0x99, 0x29, 0x12, 0xac, 0x60, 0xc5, 0x98, 0x12,
	0x42, 0x46, 0x5c, 0x22, 0x18, 0x82, 0x29, 0xa9, 0x45, 0x12, 0x6c, 0x60, 0x77, 0x62, 0x95, 0x73,
	0x32, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c,
	0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x71, 0x58, 0x20, 0x56,
	0xc0, 0x83, 0xb3, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0x1c, 0x90, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x7b, 0xdc, 0x43, 0x55, 0x6e, 0x01, 0x00, 0x00,
}

func (m *AuctionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentHighestBidder) > 0 {
		i -= len(m.CurrentHighestBidder)
		copy(dAtA[i:], m.CurrentHighestBidder)
		i = encodeVarintAuctionInfo(dAtA, i, uint64(len(m.CurrentHighestBidder)))
		i--
		dAtA[i] = 0x32
	}
	if m.CurrentHighestBid != 0 {
		i = encodeVarintAuctionInfo(dAtA, i, uint64(m.CurrentHighestBid))
		i--
		dAtA[i] = 0x28
	}
	if m.AuctionEndHeight != 0 {
		i = encodeVarintAuctionInfo(dAtA, i, uint64(m.AuctionEndHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.StartingPrice != 0 {
		i = encodeVarintAuctionInfo(dAtA, i, uint64(m.StartingPrice))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ItemName) > 0 {
		i -= len(m.ItemName)
		copy(dAtA[i:], m.ItemName)
		i = encodeVarintAuctionInfo(dAtA, i, uint64(len(m.ItemName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuctionId) > 0 {
		i -= len(m.AuctionId)
		copy(dAtA[i:], m.AuctionId)
		i = encodeVarintAuctionInfo(dAtA, i, uint64(len(m.AuctionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuctionInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuctionInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuctionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuctionId)
	if l > 0 {
		n += 1 + l + sovAuctionInfo(uint64(l))
	}
	l = len(m.ItemName)
	if l > 0 {
		n += 1 + l + sovAuctionInfo(uint64(l))
	}
	if m.StartingPrice != 0 {
		n += 1 + sovAuctionInfo(uint64(m.StartingPrice))
	}
	if m.AuctionEndHeight != 0 {
		n += 1 + sovAuctionInfo(uint64(m.AuctionEndHeight))
	}
	if m.CurrentHighestBid != 0 {
		n += 1 + sovAuctionInfo(uint64(m.CurrentHighestBid))
	}
	l = len(m.CurrentHighestBidder)
	if l > 0 {
		n += 1 + l + sovAuctionInfo(uint64(l))
	}
	return n
}

func sovAuctionInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuctionInfo(x uint64) (n int) {
	return sovAuctionInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuctionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuctionInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuctionInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuctionInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuctionInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuctionInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingPrice", wireType)
			}
			m.StartingPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartingPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionEndHeight", wireType)
			}
			m.AuctionEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionEndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHighestBid", wireType)
			}
			m.CurrentHighestBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHighestBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHighestBidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuctionInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuctionInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuctionInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentHighestBidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuctionInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuctionInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuctionInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuctionInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuctionInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuctionInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuctionInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuctionInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuctionInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuctionInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuctionInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuctionInfo = fmt.Errorf("proto: unexpected end of group")
)
